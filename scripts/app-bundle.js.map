{"version":3,"sources":["app.js","environment.js","main.js","todo.js","resources/index.js","C:/Users/admin/Desktop/AFN_AFD_A/AFN_AFD/src/app.html"],"names":["App","heading","Transitions","states","stateDescription","transitions","start","accepts","symbols","test","test2","test3","gamma","determinist","deter_transition","T","Q","Z","debug","addState","push","removeState","state","index","indexOf","splice","addTransition","transitionSymbole","transitionSource","transitionTarget","i","length","removeTransition","transition","dfa_conversion","doubles","Math","floor","random","alpha","description","includes","split","j","beta","k","symbole","charCodeAt","source","target","m","beta_state","toString","l","testing","configure","aurelia","use","basicConfiguration","then","setRoot","State","accept","Transition","Automate","config"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {State} from './todo';\nimport {Transition} from './todo';\nexport class App {\n  constructor() {\n\n  \t/* Initialisation */\n\n    /* Automate initial*/ \n\n    this.heading = \"States\";\n    this.Transitions = \"Transitions\";\n    this.states = [];\n    this.stateDescription = '';\n    this.transitions = [];\n    this.start = null ; \n    this.accepts = [];\n    this.symbols = [];\n\n\n    this.test = [];\n    this.test2 = [];\n    this.test3 = [];\n    this.gamma =[];\n\n    /* Automate déterministe */ \n    this.determinist = null ;\n\n    this.deter_transition = [];\n    this.T = [];\n    this.Q = [];\n    this.Z = [];\n\n    this.debug = 0 ;\n  }\n\n  addState() {\n  \t\t\t\t// State should be unique // fix it after\t\n    if (this.stateDescription) {\n      this.states.push(new State(this.stateDescription));\n      this.stateDescription = '';\n    }\n  }\n\n\n  removeState(state) {\n    let index = this.states.indexOf(state);\n    if (index !== -1) {\n      this.states.splice(index, 1);\n    } \n  }\n\n\n  addTransition() // Suppose that source and target already exist // if not should add them automaticly \n  {\n  \tif (this.transitionSymbole && this.transitionSource && this.transitionTarget) {\n      this.transitions.push(new Transition (this.transitionSource,this.transitionSymbole,this.transitionTarget));\n      // Add the symbol to the list of symbols\n\n      var test = true; \n\n      for(var i = 0; i < this.symbols.length ; i++)\n      {\n        if(this.symbols[i] == this.transitionSymbole)\n          test = false;\n      }\n\n      if(test)\n      this.symbols.push(this.transitionSymbole);\n\n\n      this.transitionSymbole = '';\n      this.transitionSource = '';\n      this.transitionTarget = '';\n    }\n  }\n\n   removeTransition(transition) {\n    let index = this.transitions.indexOf(transition);\n    if (index !== -1) {\n      this.transitions.splice(index, 1);\n    } \n  }\n\n\n \tdfa_conversion()\n \t{\n\n    // Par défaut pour l'instant : Start = first state added, Accept = last state added\n\n    this.start = this.states[0];\n    \n    length = this.states.length;\n\n    this.accepts.push(this.states[length -1]);\n\n\n    // Automate avant transformation \n\n   // this.automate = new Automate (this.states,this.symbols,this.transitions,this.start,this.accepts);\n    \n    // Transformation : A' = (Q,Z,S,q0,F);\n\n   // this.Q = []; // States of determinist automate\n    this.Q.push(this.states[0]); // Start == 0 \n\n    this.debug =  1; // Checked\n\n    // this.Z = this.symbols; // L'ensemble des symboles \n\n    // deter_transition :  L'ensemble des transactions de l'automate déterministe; \n\n    // T : Ensemble temporaire de nouvelles états formé de sous-ensemble d'état de l'automate initial \n\n    this.T.push(this.states[0]); \n\n    this.debug = 2; // Checked\n\n    \n\n    while(this.T.length > 0)\n    {\n\n      var doubles = false ; \n\n      var i=  Math.floor(Math.random()*(this.T.length)); // (Math.random()*100)%(this.T.length);\n\n      var alpha = new State(this.T[i].description); // Un état de T (Ensemble temporaire)\n\n      if(alpha.description.includes(\",\"))\n      {\n        doubles = true;\n        this.gamma = alpha.description.split(\",\");\n      }\n\n    //this.debug = 3 ; // Checked\n\n        for(var j=0;j<this.symbols.length;j++)\n        {\n\n          var beta = []; // L'ensemble des états atteignable par Alpha, avec le symbol courant (symbols[j])\n\n          //this.debug = 4; // Checked \n\n\n            for(var k=0;k<this.transitions.length;k++) // On vérifie pour toute les transitions \n            {\n\n                  this.test.push(this.transitions[k].symbole.charCodeAt(0));\n                  this.test2.push(alpha.description);\n\n                  //this.debug = 5; Checked \n\n              if(doubles == false)\n              {\n                if( this.transitions[k].symbole == this.symbols[j] \n                    && (this.transitions[k].source == alpha.description) ) \n                {\n                    //this.debug = 6;\n                    beta.push(this.transitions[k].target);\n                }\n              }\n              else\n              {\n                for(var m = 0; m<this.gamma.length; m++)\n                {\n                  if(this.transitions[k].symbole == this.symbols[j] && this.transitions[k].source == this.gamma[m] )\n                  {\n                    beta.push(this.transitions[k].target);\n                  }\n                }\n\n              }\n                \n        \n            } \n\n          // beta = Create new state : la concaténation des états qu'on peut atteindre à partir d'alpha, avec le symbole courant \n\n\n       \n        if(beta.length != 0)\n          {\n           // Concaténation  \n\n          var beta_state = new State(beta.toString());\n\n          this.test3.push(beta_state.description);\n\n\n          var test = true ; // test if beta_state is already included in the Q \n\n         \n         //this.debug = 7; Checked\n           // Si beta n'est pas déjà inclus déjà dans Q \n              // Alors T.push(new state)\n              // Q.push(new state)\n\n\n            for(var l=0;l<this.Q.length;l++)\n            {\n             if(this.Q[l].description == beta_state.description ) \n             {\n              test = false;\n             }\n            }\n\n\n          if(test == true)\n          {\n            this.T.push(beta_state);\n            this.Q.push(beta_state);\n          }\n          \n          //this.debug = 8; Checked\n\n          // Création d'une transition : \n          // Ajouter cette transition à la liste des transitions de l'automate déterministe \n\n          this.deter_transition.push(new Transition(alpha.description,this.symbols[j],beta_state.description));\n\n          //this.debug = 9 ; // Checked\n\n\n         }\n         else\n         {\n           this.test3.push(\"No state\");\n         }\n         \n         \n        }\n\n      // T.pop(alpha);\n\n       \n      this.T.splice(i, 1);\n\n     // this.debug = 10; // Checked \n\n    }\n\n   // this.determinist = new Automate(Q,Z,deter_transition,null,null);\n\n   \n  this.debug = 11; // Double Checked\n\n \t}\n \n\n\n}","export default {\n  debug: true,\n  testing: true\n};\n","export function configure(aurelia) {\n  aurelia.use.basicConfiguration();\n  aurelia.start().then(() => aurelia.setRoot());\n}","export class State {\r\n  constructor(description) {\r\n    this.description = description;\r\n    this.start = false ; \r\n    this.accept = false ; \r\n  }\r\n}\r\n\r\nexport class Transition{\r\n\tconstructor(source,symbole,target)\r\n\t{\r\n\t\tthis.symbole = symbole;\r\n\t\tthis.source = source ;\r\n\t\tthis.target = target; \r\n\t}\r\n}\r\n\r\nexport class Automate \r\n{\r\n\tconstructor(states,symbols,transitions,start,accepts)\r\n\t{\r\n\t\tthis.states = states; \r\n\t\tthis.symbols = symbols;\r\n\t\tthis.transitions = transitions;\r\n\t\tthis.start = start;\r\n\t\tthis.accepts = accepts;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n /* JSON \r\n  done()\r\n  {\r\n\r\n  \tvar length = states.length; \r\n\r\n  \tvar object = {\r\n\r\n  \t\t\"states\": states,\r\n  \t\t\"transitions\" : transitons,\r\n  \t\t\"start\" : states[0],\r\n  \t\t\"accept\" : states[length -1]\r\n  \t}\r\n\r\n  \t// Testing JSON\r\n\r\n  \t// Storing Data ; \r\n\r\n  \tvar json = JSON.stringify(object);\r\n\r\n  \tlocalStorage.setItem(\"Automate\",json);\r\n\r\n  \t// Retrieving Data;\r\n\r\n  \tvar text = localStorage.getItem(\"Automate\");\r\n\r\n  \tvar done = JSON.parse(text);\r\n\r\n  }\r\n\r\n  */\r\n","export function configure(config) {\n  //config.globalResources([]);\n}\n",null],"sourceRoot":"../src"}